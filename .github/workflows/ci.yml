name: windowsCI

on: [push]

jobs:
  # windows:
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       static: [0, 1]

  #   steps:
  #     - uses: actions/setup-python@v2
  #       with:
  #         # Semantic version range syntax or exact version of a Python version
  #         python-version: '3.7.9' 
  #         # Optional - x64 or x86 architecture, defaults to x64
  #         architecture: 'x64' 
  #         # You can test your matrix by printing the current Python version
  #     - name: Install boost
  #       run: c:\msys64\usr\bin\pacman.exe -S --noconfirm mingw-w64-x86_64-boost
  #     - name: Boost library
  #       run: Copy-Item "c:\msys64\mingw64\bin\libboost_unit_test_framework-mt.dll" -Destination "c:\msys64\mingw64\bin\boost_unit_test_framework.dll"
  #     - name: Install swig
  #       run: |
  #         (New-Object System.Net.WebClient).DownloadFile("http://prdownloads.sourceforge.net/swig/swigwin-4.0.1.zip","d:\a\_temp\swigwin-4.0.1.zip");
  #         Expand-Archive d:\a\_temp\swigwin-4.0.1.zip d:\a\_temp\;
  #     - name: setup-enviroment
  #       run: |
  #        echo "c:\msys64\mingw64\bin" >> $GITHUB_PATH
  #        echo "c:\hostedtoolcache\windows\Python\3.7.7\x64" >> $GITHUB_PATH
  #        echo "d:\a\_temp\swigwin-4.0.1" >> $GITHUB_PATH
  #        echo "JAVA_HOME=JAVA_HOME_13_X64" >> $GITHUB_ENV
  #     - name: install python dependencies
  #       run: python -m pip install scons pywin32 numpy scipy matplotlib
  #     - uses: actions/checkout@v2
  #     - name: build
  #       run: scons -j2 PYDOC=0 CHECK_STYLE=0 BUILD_STATICLIB=${{ matrix.static }} COMPILER=gnu OPT=1 GSL_INCLUDE_PATH="" CPPDEFINES="_POSIX_C_SOURCE=1" CC="C:\msys64\mingw64\bin\gcc.exe" CXX="C:\msys64\mingw64\bin\g++.exe" LINK="C:\msys64\mingw64\bin\g++.exe" BOOST_INCLUDE_PATH="C:\msys64\mingw64\include" BOOST_LIBRARY_PATH="C:\msys64\mingw64\bin"
  # linux-minimal:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: install python dependencies
  #       run: python -m pip install scons
  #     - uses: actions/checkout@v2
  #     - name: build
  #       run: scons -j 2 SG_PYTHON=0 SG_JAVA=0 RUN_CPP_EXAMPLES=1
  # linux-medium:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: install python dependencies
  #       run: python -m pip install scons
  #     - name: install apt packages
  #       run: |
  #         sudo apt update -y
  #         sudo apt install -y libboost-test-dev swig python3-dev python3-numpy openjdk-8-jdk doxygen
  #     - uses: actions/checkout@v2
  #     - name: build
  #       run: scons -j 2 SG_ALL=0 SG_BASE=1 SG_PYTHON=1 SG_JAVA=1 RUN_CPP_EXAMPLES=1 RUN_PYTHON_EXAMPLES=1
  # linux-full:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: install python dependencies
  #       run: python -m pip install scons
  #     - name: install apt packages
  #       run: |
  #         sudo apt update -y
  #         sudo apt install -y libboost-test-dev swig python3-dev python3-numpy openjdk-8-jdk doxygen graphviz libgsl-dev zlib1g-dev libeigen3-dev libsuitesparse-dev libarmadillo-dev libgmm++-dev
  #     - uses: actions/checkout@v2
  #     - name: build
  #       run: scons -j 2 RUN_CPP_EXAMPLES=1 RUN_PYTHON_EXAMPLES=1
  # linux-packaging:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: install scons
  #       run: python -m pip install scons
  #     - name: install apt packages
  #       run: |
  #         sudo apt update -y
  #         sudo apt install -y fakeroot swig python3-pip python3-dev libgomp1 doxygen openjdk-11-jdk javahelper
  #     - uses: actions/checkout@v2
  #     - name: prepare packaging
  #       run: bash $GITHUB_WORKSPACE/tools/travis_scripts/install_pip_packaging_tools.sh
  #     - name: test deb packaging
  #       run: bash $GITHUB_WORKSPACE/tools/travis_scripts/create_deb_install_deb_and_test.sh
  #     - name: test python packaging
  #       run: bash $GITHUB_WORKSPACE/tools/travis_scripts/create_and_patch_python_wheel.sh
  linux-minimal-compiler:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # compiler: [g++-5, g++-6, g++-7, g++-8, g++-9, g++-10, g++-11, clang-3.9, clang-4.0, clang-5.0, clang-6.0, clang-7, clang-8, clang-9, clang-10, clang-11, clang-12]
        compiler: [clang-7, clang-8, clang-9, clang-10, clang-11, clang-12]
      fail-fast: false
    steps:
      - name: "Install ${{ matrix.compiler }}"
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          echo "deb http://dk.archive.ubuntu.com/ubuntu/ bionic main universe" | sudo tee -a /etc/apt/sources.list
          echo "deb http://archive.ubuntu.com/ubuntu/ focal-proposed universe" | sudo tee -a /etc/apt/sources.list
          sudo apt update
          sudo apt upgrade
          sudo apt install ${{ matrix.compiler }}
          ${{ matrix.compiler }} --version
          if [[ ${{ matrix.compiler }} == g++* ]]; then
            export GCC=$(echo ${{ matrix.compiler }} | sed "s/g++/gcc/")
            sudo apt install $GCC
            $GCC --version
          fi
          if [[ ${{ matrix.compiler }} == clang* ]]; then
            if [[ ${{ matrix.compiler }} == *.* ]]; then
              sudo apt install libomp5
            else
              sudo apt install libomp-$(echo ${{ matrix.compiler }} | sed "s/clang-//")-dev
            fi
          fi
      - name: install python dependencies
        run: python -m pip install scons
      - uses: actions/checkout@v2
      - name: build
        run: | 
          if [[ ${{ matrix.compiler }} == g++* ]]; then
            export CXX=${{ matrix.compiler }}
            export CC=$(echo ${{ matrix.compiler }} | sed "s/g++/gcc/")
            scons -j 2 SG_PYTHON=0 SG_JAVA=0 RUN_CPP_EXAMPLES=1 CXX=$CXX CC=$CC COMPILER=gnu
          else
            export CXX=$(echo ${{ matrix.compiler }} | sed "s/clang/clang++/")
            export CC=${{ matrix.compiler }}
            
            if [[ ${{ matrix.compiler }} == *.* ]]; then
              export OMPH_PATH=$(dpkg -L libomp5 | grep ".*/omp.h" | sed "s|/omp.h||g")
            else
              export OMPH_PATH=$(dpkg -L libomp-$(echo ${{ matrix.compiler }} | sed "s/clang-//")-dev | grep ".*/omp.h" | sed "s|/omp.h||g")
              export OMPLIB_PATH=$(dpkg -L libomp-$(echo ${{ matrix.compiler }} | sed "s/clang-//")-dev | grep ".*/libomp5.so" | sed "s|/libomp5.so||g")
            fi
            export CPLUS_INCLUDE_PATH=$OMPH_PATH:$CPLUS_INCLUDE_PATH
            export LD_LIBRARY_PATH=$OMPLIB_PATH:$LD_LIBRARY_PATH
            echo $CPLUS_INCLUDE_PATH
            scons -j 2 SG_PYTHON=0 SG_JAVA=0 RUN_CPP_EXAMPLES=1 CXX=$CXX CC=$CC COMPILER=clang
          fi
          
